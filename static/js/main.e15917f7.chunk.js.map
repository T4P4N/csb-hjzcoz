{"version":3,"sources":["PriceChart.js","rangeSlider.js","Prompt.js","Dialog.js","DebtDialog.js","Alert.js","App.js","index.js"],"names":["Chart","data","buybtn","sellbtn","handleClick","buyItem","className","items","map","i","index","onClick","e","name","replace","c","toUpperCase","price","qty","RangeSlider","min","max","item_name","showSlider","hideSlider","inputRef","handleValue","handleAction","type","value","ref","id","onChange","ConfirmBox","setAction","showPrompt","Dialog","showDialog","dialogContent","DebtDialog","debtShowDialog","debtDialogContent","Alert","message","hideAlert","length","App","w_price","Math","floor","random","p_price","c_price","h_price","a_price","l_price","React","useState","cash","bank","debt","priceChart","setPriceChart","location","currentArea","setCurrentArea","days","setDays","setMessage","setDialogContent","setShowDialog","setDebtDialogContent","setDebtShowDialog","changeLocation","area","new_debt","round","new_bank","filter","p","setPrices","qty_max","setQtyMax","show_slider","setShowSlider","setShowPrompt","setItemName","item","quantity","total","max_qty","setqty","sellItem","hide_slider","action","useRef","handleSetAction","console","log","current","parseInt","new_item","new_cash","buyN","sellN","amount","handleDeposit","handleWithdraw","handleLoanPaid","handleLoanTaken","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.e15917f7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst Chart = ({ data, buybtn, sellbtn, buyItem, handleClick }) => {\r\n  return (\r\n    <>\r\n      <div className=\"price-chart\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th className=\"item-name\">Name</th>\r\n              <th>Price($)</th>\r\n              <th>Sell</th>\r\n              <th>Qty</th>\r\n              <th>Buy</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.items.map((i, index) => (\r\n              <tr className=\"item\" key={index}>\r\n                <td\r\n                  className=\"item-name\"\r\n                  onClick={(e) => handleClick(i.name, e)}\r\n                >\r\n                  {i.name.replace(/^\\w/, (c) => c.toUpperCase())}\r\n                </td>\r\n                <td\r\n                  className=\"item-price\"\r\n                  onClick={(e) => handleClick(i.name, e)}\r\n                >\r\n                  {i.price}\r\n                </td>\r\n                <td className=\"sell-btn\" onClick={(e) => sellbtn(i.name, e)}>\r\n                  {\" \"}\r\n                  -{\" \"}\r\n                </td>\r\n                <td className=\"item-price\">{i.qty}</td>\r\n                <td className=\"buy-btn\" onClick={(e) => buybtn(i.name, e)}>\r\n                  {\" \"}\r\n                  +{\" \"}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n          <tfoot>\r\n            <tr>\r\n              <td></td>\r\n              <td></td>\r\n            </tr>\r\n          </tfoot>\r\n        </table>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst RangeSlider = ({\r\n  min,\r\n  max,\r\n  name,\r\n  item_name,\r\n  showSlider,\r\n  hideSlider,\r\n  inputRef,\r\n  qty,\r\n  handleValue,\r\n  handleAction\r\n}) => {\r\n  return (\r\n    <div className={showSlider ? \"slidecontainer\" : \"slidecontainer-hidden\"}>\r\n      <div className=\"slide-wrap\">\r\n        <p className=\"prompt-name\">\r\n          {item_name.replace(/^\\w/, (c) => c.toUpperCase())} ({qty})\r\n        </p>\r\n        <br />\r\n        <input\r\n          type=\"range\"\r\n          min={min}\r\n          max={max}\r\n          value={qty}\r\n          className=\"slider\"\r\n          ref={inputRef}\r\n          id=\"myRange\"\r\n          onChange={(e, name) => {\r\n            handleValue(e, name);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"btn-container\">\r\n        <button onClick={hideSlider}>Cancel</button>\r\n        <button\r\n          onClick={(e) => {\r\n            handleAction(item_name, qty, name);\r\n          }}\r\n        >\r\n          {name}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RangeSlider;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst ConfirmBox = ({ setAction, showPrompt, item_name }) => {\r\n  return (\r\n    <div className={showPrompt ? \"confirm-box\" : \"confirm-box-hidden\"}>\r\n      <p>{item_name.replace(/^\\w/, (c) => c.toUpperCase())}</p>\r\n      <div className=\"btns\">\r\n        <button onClick={() => setAction(\"cancel\")}>Cancel</button>\r\n        <button onClick={() => setAction(\"buy\", item_name)}>Buy</button>\r\n        <button onClick={() => setAction(\"sell\", item_name)}>Sell</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfirmBox;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst Dialog = ({ setAction, showDialog, dialogContent }) => {\r\n  return (\r\n    <div className={showDialog ? \"dialog-box\" : \"dialog-box-hidden\"}>\r\n      <p>{dialogContent}</p>\r\n      <div className=\"btns\">\r\n        <button onClick={() => setAction(\"deposit\")}>Deposit</button>\r\n        <button onClick={() => setAction(\"withdraw\")}>Withdraw</button>\r\n        <button onClick={() => setAction(\"cancel\")}>Cancel</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialog;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst DebtDialog = ({ setAction, debtShowDialog, debtDialogContent }) => {\r\n  return (\r\n    <div\r\n      className={debtShowDialog ? \"debt-dialog-box\" : \"debt-dialog-box-hidden\"}\r\n    >\r\n      <p>{debtDialogContent}</p>\r\n      <div className=\"btns\">\r\n        <button onClick={() => setAction(\"pay-loan\")}>PayDebt</button>\r\n        <button onClick={() => setAction(\"take-loan\")}>Take Loan</button>\r\n        <button onClick={() => setAction(\"cancel\")}>Cancel</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DebtDialog;\r\n","const Alert = ({ message, hideAlert }) => {\r\n  return (\r\n    <div className={message.length > 1 ? \"alert\" : \"alert-hidden\"}>\r\n      <p className=\"msg\">{message}</p>\r\n      <span className=\"closebtn\" onClick={hideAlert}>\r\n        &times;\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import \"./styles.css\";\nimport React from \"react\";\nimport Chart from \"./PriceChart\";\nimport RangeSlider from \"./rangeSlider\";\nimport ConfirmBox from \"./Prompt\";\nimport Dialog from \"./Dialog\";\nimport DebtDialog from \"./DebtDialog\";\nimport Alert from \"./Alert\";\n\nexport default function App() {\n  let w_price = Math.floor(Math.random() * (850 - 25 + 1)) + 25;\n  let p_price = Math.floor(Math.random() * (3050 - 880 + 1)) + 880;\n  let c_price = Math.floor(Math.random() * (80000 - 30000 + 1)) + 30000;\n  let h_price = Math.floor(Math.random() * (40000 - 5000 + 1)) + 5000;\n  let a_price = Math.floor(Math.random() * (4500 - 900 + 1)) + 900;\n  let l_price = Math.floor(Math.random() * (70 - 4 + 1)) + 4;\n  const [priceChart, setPriceChart] = React.useState({\n    cash: 10000,\n    bank: 0,\n    debt: 5500,\n    items: [\n      { name: \"weed\", price: w_price, qty: 0 },\n      { name: \"cocaine\", price: c_price, qty: 0 },\n      { name: \"heroine\", price: h_price, qty: 0 },\n      { name: \"acid\", price: a_price, qty: 0 },\n      { name: \"ludes\", price: l_price, qty: 0 },\n      { name: \"pcp\", price: p_price, qty: 0 }\n    ]\n  });\n  const [location, setLocation] = React.useState([\n    \"bankner\",\n    \"narela\",\n    \"bawana\",\n    \"alipur\",\n    \"azadpur\"\n  ]);\n  const [currentArea, setCurrentArea] = React.useState(\"bankner\");\n  const [days, setDays] = React.useState(30);\n\n  const [message, setMessage] = React.useState(\"\");\n\n  const [dialogContent, setDialogContent] = React.useState(\"\");\n  const [showDialog, setShowDialog] = React.useState(false);\n  // Loan dialog\n  const [debtDialogContent, setDebtDialogContent] = React.useState(\"\");\n  const [debtShowDialog, setDebtShowDialog] = React.useState(false);\n\n  function handleLoanPay() {\n    if (priceChart.cash > priceChart.debt) {\n      setQtyMax(priceChart.debt);\n    } else {\n      setQtyMax(priceChart.cash);\n    }\n    setItemName(\"Pay Loan!\");\n    setAction(\"pay-debt\");\n    setShowSlider(true);\n  }\n  function handleLoanTake() {\n    setQtyMax(500);\n    setItemName(\"Take Loan\");\n    setAction(\"take-debt\");\n    setShowSlider(true);\n  }\n  function handleBankDeposit() {\n    setQtyMax(priceChart.cash);\n    setItemName(\"Deposit Cash!\");\n    setAction(\"Deposit\");\n    setShowSlider(true);\n  }\n\n  function handleBankWithDraw() {\n    setQtyMax(priceChart.bank);\n    setItemName(\"Withdraw Cash!\");\n    setAction(\"Withdraw\");\n    setShowSlider(true);\n  }\n\n  // hide alert\n  function hideAlert() {\n    setMessage(\"\");\n  }\n\n  // Reset Function\n  function reset_to_default() {\n    setPriceChart({\n      cash: 10000,\n      bank: 0,\n      debt: 5550,\n      items: [\n        { name: \"weed\", price: w_price, qty: 0 },\n        { name: \"cocaine\", price: c_price, qty: 0 },\n        { name: \"heroine\", price: h_price, qty: 0 },\n        { name: \"acid\", price: a_price, qty: 0 },\n        { name: \"ludes\", price: l_price, qty: 0 },\n        { name: \"pcp\", price: p_price, qty: 0 }\n      ]\n    });\n    setDays(10);\n    setCurrentArea(\"bankner\");\n  }\n  //\n\n  function setPrices() {\n    // setting prices\n    let w_price = Math.floor(Math.random() * (850 - 25 + 1)) + 25;\n    let p_price = Math.floor(Math.random() * (3050 - 880 + 1)) + 880;\n    let c_price = Math.floor(Math.random() * (80000 - 30000 + 1)) + 30000;\n    let h_price = Math.floor(Math.random() * (40000 - 5000 + 1)) + 5000;\n    let a_price = Math.floor(Math.random() * (4500 - 900 + 1)) + 900;\n    let l_price = Math.floor(Math.random() * (70 - 4 + 1)) + 4;\n    priceChart.items.filter((p) => p.name === \"weed\")[0].price = w_price;\n    priceChart.items.filter((p) => p.name === \"cocaine\")[0].price = c_price;\n    priceChart.items.filter((p) => p.name === \"heroine\")[0].price = h_price;\n    priceChart.items.filter((p) => p.name === \"acid\")[0].price = a_price;\n    priceChart.items.filter((p) => p.name === \"ludes\")[0].price = l_price;\n    priceChart.items.filter((p) => p.name === \"pcp\")[0].price = p_price;\n  }\n\n  function changeLocation(area) {\n    if (currentArea === area) {\n      setMessage(\n        `You are already in ${area.replace(/^\\w/, (c) => c.toUpperCase())}`\n      );\n      return false;\n    }\n    const items = priceChart.items;\n    const cash = priceChart.cash;\n    const debt = priceChart.debt;\n    const bank = priceChart.bank;\n    const new_debt = Math.round(debt + (debt * 10) / 100);\n    const new_bank = Math.round(bank + (bank * 2) / 100);\n    setPrices();\n    setDays(days - 1);\n    if (days <= 0) {\n      let score = bank + cash - debt;\n      setMessage(`Game Over, Your Score is ${score}`);\n      reset_to_default();\n      return 0;\n    }\n    setPriceChart({\n      cash: cash,\n      debt: new_debt,\n      bank: new_bank,\n      items: [...items]\n    });\n    setCurrentArea(area);\n  }\n\n  // get max qty you can buy with limited cash\n  function max_qty(price, cash) {\n    let quantity = 0;\n    let total = 0;\n    for (let i = 0; i < cash; i++) {\n      if (cash > total) {\n        quantity++;\n        total = price * quantity;\n      }\n      if (total === cash) {\n        return quantity;\n      }\n      if (total > cash) {\n        return quantity - 1;\n      }\n    }\n    return quantity;\n  }\n\n  // Buy item with n of qty\n  function buyN(item_name, qty) {\n    qty = parseInt(qty);\n    // console.log(item, qty, priceChart);\n    const item = priceChart.items.filter((p) => p.name === item_name)[0];\n    const items = priceChart.items;\n    const cash = priceChart.cash;\n    const bank = priceChart.bank;\n    const debt = priceChart.debt;\n    const new_item = item;\n    if (item.price > cash) {\n      setMessage(\"You dont have enough cash\");\n      return 0;\n    }\n    if (new_item) {\n      new_item.qty += qty;\n    }\n    const new_cash = cash - item.price * qty;\n    setPriceChart({\n      cash: new_cash,\n      bank: bank,\n      debt: debt,\n      items: [...items]\n    });\n\n    hide_slider();\n  }\n\n  // Sell items & make money\n  function sellN(item_name, qty) {\n    qty = parseInt(qty);\n    const item = priceChart.items.filter((p) => p.name === item_name)[0];\n    const items = priceChart.items;\n    const cash = priceChart.cash;\n    const bank = priceChart.bank;\n    const debt = priceChart.debt;\n\n    if (item.qty > 0) {\n      // Object.assign(priceChart.items, { : \"Pete\" });\n      item.qty -= qty;\n    } else {\n      setMessage(`You dont have any ${item_name} left`);\n      hide_slider();\n      return false;\n    }\n    const new_cash = cash + item.price * qty;\n    setPriceChart({\n      cash: new_cash,\n      bank: bank,\n      debt: debt,\n      items: [...items]\n    });\n    hide_slider();\n  }\n\n  // Buy function for + btn\n  function buyOne(item_name) {\n    buyItem(item_name);\n  }\n\n  // Sell function for - btn\n  function sellOne(item_name) {\n    sellItem(item_name);\n  }\n\n  ////////////////////////////////////////////\n  // State for managing custom input slider\n  // & confirmation box.\n\n  // max quantity of items to be bought or sold\n  const [qty_max, setQtyMax] = React.useState(0);\n\n  // slider toggle state\n  const [show_slider, setShowSlider] = React.useState(false);\n\n  // confirmation box/ prompt toggle state\n  const [showPrompt, setShowPrompt] = React.useState(false);\n\n  // use less maybe\n  // const [quant, setQuant] = React.useState(1);\n  // anyways dont touch it\n\n  // for setting itemname for input slider & confirmation box\n  const [item_name, setItemName] = React.useState(\"\");\n\n  // Buy from slider\n  function buyItem(item_name) {\n    const item = priceChart.items.filter((p) => p.name === item_name)[0];\n    const cash = priceChart.cash;\n    const qty = max_qty(item.price, cash);\n    if (qty <= 0) {\n      setMessage(`You can't buy ${item_name}`);\n      return 0;\n    }\n    setItemName(item_name);\n    setAction(\"Buy\");\n    setQtyMax(qty);\n    setqty(qty);\n    setShowSlider(true);\n  }\n\n  // Sell from slider\n  function sellItem(item_name) {\n    const item = priceChart.items.filter((p) => p.name === item_name)[0];\n    const qty = item.qty;\n    if (qty <= 0) {\n      setMessage(`You don't have any ${item_name} left`);\n      return 0;\n    }\n    setAction(\"Sell\");\n    setItemName(item_name);\n    setQtyMax(qty);\n    setqty(qty);\n    setShowSlider(true);\n  }\n\n  // hide slider function\n  function hide_slider() {\n    // setQuant(1);\n    setShowSlider(false);\n  }\n  // more states for handling input slider & confirmation box\n  const [qty, setqty] = React.useState(qty_max);\n  const [action, setAction] = React.useState(\"\");\n  const inputRef = React.useRef();\n\n  // function for handling value coming from input slider\n  function handleValue(e, name) {\n    setqty(inputRef.current.value);\n  }\n\n  // function for handling click event\n  // coming from pricechart\n  // //\n  function handleClick(item_name) {\n    const item = priceChart.items.filter((p) => p.name === item_name)[0];\n    const cash = priceChart.cash;\n    // if user can afford to buy then show buy slider\n    if (item.qty <= 0) {\n      buyItem(item_name);\n    }\n    //  if user can't afford to buy more then show sell slider\n    else if (item.qty > 0 && cash < item.price) {\n      sellItem(item_name);\n    }\n    // if user can buy & sell then show confirmation box\n    else if (item.qty > 0) {\n      setItemName(item_name);\n      setShowPrompt(true);\n    }\n  }\n\n  // function for handling Confirmation box\n  // Refactor it to useReducer or may switch case.\n  function handleSetAction(action, item_name) {\n    if (action === \"buy\") {\n      setShowPrompt(false);\n      buyItem(item_name);\n    } else if (action === \"sell\") {\n      setShowPrompt(false);\n      sellItem(item_name);\n    } else if (action === \"deposit\") {\n      setShowDialog(false);\n      handleBankDeposit();\n    } else if (action === \"withdraw\") {\n      setShowDialog(false);\n      handleBankWithDraw();\n    } else if (action === \"cancel\") {\n      setShowDialog(false);\n      setDebtShowDialog(false);\n    } else if (action === \"pay-loan\") {\n      setShowDialog(false);\n      setDebtShowDialog(false);\n      handleLoanPay();\n    } else if (action === \"take-loan\") {\n      setShowDialog(false);\n      setDebtShowDialog(false);\n      handleLoanTake();\n    } else {\n      console.log(action, item_name);\n      setShowPrompt(false);\n    }\n  }\n\n  function handleDeposit(qty) {\n    let amount = parseInt(qty);\n    const items = priceChart.items;\n    const cash = priceChart.cash;\n    const bank = priceChart.bank;\n    const debt = priceChart.debt;\n    if (cash < amount) {\n      // console.log(amount);\n      hide_slider();\n      setMessage(\"You dont have enough cash!!!\");\n      return false;\n    }\n    const new_cash = cash - amount;\n    const new_bank = bank + amount;\n    setPriceChart({\n      cash: new_cash,\n      bank: new_bank,\n      debt: debt,\n      items: [...items]\n    });\n    hide_slider();\n  }\n  function handleWithdraw(qty) {\n    let amount = parseInt(qty);\n    const bank = priceChart.bank;\n    if (amount > bank) {\n      hide_slider();\n      setMessage(\"Not enough bank balance!!!\");\n      return 0;\n    }\n    const items = priceChart.items;\n    const cash = priceChart.cash;\n    const debt = priceChart.debt;\n    const new_cash = cash + amount;\n    const new_bank = bank - amount;\n    setPriceChart({\n      cash: new_cash,\n      bank: new_bank,\n      debt: debt,\n      items: [...items]\n    });\n    hide_slider();\n  }\n\n  function handleLoanPaid(qty) {\n    let amount = parseInt(qty);\n    const items = priceChart.items;\n    const cash = priceChart.cash;\n    const bank = priceChart.bank;\n    const debt = priceChart.debt;\n    if (debt < 0) {\n      setMessage(\"you dont have any debt\");\n      return false;\n    }\n    const new_cash = cash - amount;\n    const new_debt = debt - amount;\n    setPriceChart({\n      cash: new_cash,\n      bank: bank,\n      debt: new_debt,\n      items: [...items]\n    });\n    hide_slider();\n  }\n  function handleLoanTaken(qty) {\n    let amount = parseInt(qty);\n    const items = priceChart.items;\n    const cash = priceChart.cash;\n    const bank = priceChart.bank;\n    const debt = priceChart.debt;\n    const new_cash = cash + amount;\n    const new_debt = debt + amount;\n    setPriceChart({\n      cash: new_cash,\n      bank: bank,\n      debt: new_debt,\n      items: [...items]\n    });\n    hide_slider();\n  }\n  // function for handling action coming from input slider\n  function handleAction(item_name, qty, action) {\n    if (action === \"buy\" || action === \"Buy\") {\n      buyN(item_name, qty);\n    } else if (action === \"sell\" || action === \"Sell\") {\n      sellN(item_name, qty);\n    } else if (action === \"Deposit\" || action === \"Deposit Cash!\") {\n      console.log(item_name, \"==>\", qty);\n      handleDeposit(qty);\n    } else if (action === \"Withdraw\" || action === \"Withdraw Cash!\") {\n      console.log(item_name, \"==>\", qty);\n      handleWithdraw(qty);\n    } else if (action === \"pay-debt\" || action === \"Pay Debt\") {\n      console.log(item_name, \"==>\", qty);\n      handleLoanPaid(qty);\n    } else if (action === \"take-debt\" || action === \"Pay Debt\") {\n      console.log(item_name, \"==>\", qty);\n      handleLoanTaken(qty);\n    }\n    // add take handle take loan here\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"status-bar\">\n        In: {currentArea.replace(/^\\w/, (c) => c.toUpperCase())} | CASH: $\n        {priceChart.cash} | DAYS LEFT: {days}\n      </h1>\n      <h2>\n        <button\n          onClick={() => {\n            setDialogContent(\"Welcome to Citi Bank\");\n            setShowDialog(true);\n          }}\n        >\n          Bank: ${priceChart.bank}\n        </button>\n        <button\n          onClick={() => {\n            setDebtDialogContent(\"Need Money??\");\n            setDebtShowDialog(true);\n          }}\n        >\n          DEBT: ${priceChart.debt}\n        </button>\n      </h2>\n      <div className=\"d_row\">\n        <h4>Where To?</h4>\n        <br />\n        {location.map((i, index) => (\n          <button\n            className={i === currentArea ? \"btn-disabled\" : \"location-btn\"}\n            key={index}\n            onClick={(e) => changeLocation(i, e)}\n          >\n            {i.replace(/^\\w/, (c) => c.toUpperCase())}\n          </button>\n        ))}\n      </div>\n      <Alert message={message} hideAlert={hideAlert} />\n      {/* TOODS: */}\n      {/*  */}\n      {/* color coded price indicator */}\n      {/* Pocket sizes aka quanitity restriction */}\n      {/* RPG elements with health & guns & cops */}\n      {/* Mugger & robbery */}\n      {/* msgs for all time high price & low price */}\n      {/*  */}\n      <Chart\n        data={priceChart}\n        buybtn={buyOne}\n        sellbtn={sellOne}\n        buyItem={buyItem}\n        handleClick={handleClick}\n      />\n      <RangeSlider\n        min={1}\n        max={qty_max}\n        item_name={item_name}\n        name={action}\n        inputRef={inputRef}\n        qty={qty}\n        handleValue={handleValue}\n        showSlider={show_slider}\n        hideSlider={hide_slider}\n        handleAction={handleAction}\n      />\n      <Dialog\n        showDialog={showDialog}\n        dialogContent={dialogContent}\n        setAction={handleSetAction}\n      />\n      <DebtDialog\n        debtShowDialog={debtShowDialog}\n        debtDialogContent={debtDialogContent}\n        setAction={handleSetAction}\n      />\n\n      <ConfirmBox\n        setAction={handleSetAction}\n        showPrompt={showPrompt}\n        item_name={item_name}\n      />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}